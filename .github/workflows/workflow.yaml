name: 'Automatic Semver Versioning'

# on:
#   workflow_dispatch:
#   push:
#     branches:
#       - main
#     tags:
#       - 'v*'  # Trigger workflow on version tag pushes (v1.2.3)

on:
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      branch:
        description: 'Branch to checkout'
        required: false
        default: 'main'


jobs:
  setup-build-publish-deploy:
    name: 'Setup, Build, Publish, and Deploy'
    runs-on: 'ubuntu-latest'
    environment: 'production'

    steps:
      # - name: 'Checkout'
      #   uses: 'actions/checkout@v2'

      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.inputs.branch }}

      - name: Build Application
        run: |
          echo "Building application from ${{ github.event.inputs.branch }} branch"
          # Add your build commands here

      - name: Print branch
        run: |
          echo "Deploying application from ${{ github.event.inputs.branch }} branch"
          # Add your deployment commands here
          git branch
          
#################################################################################################
      # Install GitHub CLI
      - name: Install GitHub CLI
        run: |
          curl -fsSL https://cli.github.com/packages/githubcli.repo | sudo tee /etc/apt/sources.list.d/github-cli.list
          sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys C99B11DEB97541F0
          sudo apt update
          sudo apt install gh
          
      # Authenticate GitHub CLI
      - name: Authenticate GitHub CLI
        run: gh auth login --with-token <<< ${{ secrets.PAT_TOKEN }}

      # Check if apiVersion exists
      - name: Check for apiVersion variable
        id: check_var
        run: |
          if gh api /repos/${{ github.repository }}/actions/variables/apiVersion &>/dev/null; then
            echo "apiVersion variable exists."
            echo "exists=true" >> $GITHUB_ENV
          else
            echo "apiVersion variable does not exist."
            echo "exists=false" >> $GITHUB_ENV
          fi

      # Create apiVersion if it doesn't exist
      - name: Create repository variable
        if: env.exists == 'false'
        run: |
          gh api \
            --method POST \
            -H "Accept: application/vnd.github+json" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            /repos/${{ github.repository }}/actions/variables \
            -f "name=apiVersion" -f "value=0.0.0"

      # Fetch the current apiVersion variable
      - name: Get current apiVersion
        id: get_version
        run: |
          version=$(gh api /repos/${{ github.repository }}/actions/variables/apiVersion | jq -r '.value')
          echo "Current version: $version"
          echo "version=$version" >> $GITHUB_ENV

      # Determine new version based on commits (Semantic Versioning logic)
      - name: Determine new version
        id: new_version
        run: |
          # Simple logic for Semver bump: Change based on commit message or tag
          version=${{ env.version }}
          if git log -1 --pretty=%B | grep -iq 'BREAKING CHANGE'; then
            # Major bump for breaking changes
            new_version=$(echo $version | awk -F. -v OFS=. '{print $1+1,0,0}')
          elif git log -1 --pretty=%B | grep -iq 'feat'; then
            # Minor bump for new features
            new_version=$(echo $version | awk -F. -v OFS=. '{print $1,$2+1,0}')
          else
            # Patch bump for bug fixes
            new_version=$(echo $version | awk -F. -v OFS=. '{print $1,$2,$3+1}')
          fi
          echo "New version: $new_version"
          echo "new_version=$new_version" >> $GITHUB_ENV

      # Update the apiVersion variable
      - name: Update apiVersion variable
        run: |
          gh api \
            --method PATCH \
            -H "Accept: application/vnd.github+json" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            /repos/${{ github.repository }}/actions/variables/apiVersion \
            -f "value=${{ env.new_version }}"

      # Create a Git tag for the new version
      # - name: Create Git Tag
      #   run: |
      #     git tag "v${{ env.new_version }}"
      #     git push origin "v${{ env.new_version }}"
